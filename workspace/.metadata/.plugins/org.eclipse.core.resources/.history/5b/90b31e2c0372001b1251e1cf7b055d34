package cool.paul.fh.wortsuche.client;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.concurrent.CountDownLatch;

import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;

import cool.paul.fh.wortsuche.common.entity.GameState;
import cool.paul.fh.wortsuche.common.entity.Player;
import cool.paul.fh.wortsuche.common.entity.Word;
import cool.paul.fh.wortsuche.common.exception.GameAlreadyRunningException;
import cool.paul.fh.wortsuche.common.exception.MapNotFoundException;
import cool.paul.fh.wortsuche.common.exception.NoGameFoundException;
import cool.paul.fh.wortsuche.common.exception.NotYourTurnException;
import cool.paul.fh.wortsuche.common.exception.PlayerNotFoundException;
import cool.paul.fh.wortsuche.common.exception.WordAlreadySolvedException;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ComplexMap2Test {

	private static CountDownLatch latch;

	private static ServiceHandlerImpl i1;
	private static ServiceHandlerImpl i2;
	private static Player p1;
	private static Player p2;

	@BeforeClass
	public static void setup() {
		latch = new CountDownLatch(0);

		i1 = new ServiceHandlerImpl();
		i2 = new ServiceHandlerImpl();

		i1.addObserver((o, arg) -> {
			latch.countDown();
		});
		i2.addObserver((o, arg) -> {
			latch.countDown();
		});
	}

//	@Test
	public void playMap2() throws InterruptedException, NotYourTurnException, WordAlreadySolvedException,
			NoGameFoundException, GameAlreadyRunningException, MapNotFoundException, PlayerNotFoundException {
		ServiceHandlerImpl x1 = new ServiceHandlerImpl();

		assertEquals(null, x1.getGame());

		x1.newGame(2);

		Player p1 = x1.join("Eins");

		ServiceHandlerImpl x2 = new ServiceHandlerImpl();
		Player p2 = x2.join("Zwei");

		latch = new CountDownLatch(2);

		x1.addObserver((o, arg) -> {
			latch.countDown();
		});
		x2.addObserver((o, arg) -> {
			latch.countDown();
		});

		assertEquals(GameState.LOBBY, x1.getGame().getState());
		x1.startGame();
		latch.await();
		assertEquals(GameState.RUNNING, x1.getGame().getState());

		Player turnExpected = p1;
		ServiceHandlerImpl handlerImplExpected = x1;

		for (int i = 0; i < x1.getGame().getMap().getWords().size(); i++) {
			Word w = handlerImplExpected.getGame().getMap().getWords().get(i);

			assertEquals(GameState.RUNNING, x1.getGame().getState());
			assertEquals(turnExpected, handlerImplExpected.getGame().getCurrentTurn());

			latch = new CountDownLatch(2);
			String expectedWord = w.getString(handlerImplExpected.getGame().getMap());
			String foundWord = handlerImplExpected.selectWord(w.getX1(), w.getY1(), w.getX2(), w.getY2());

			System.out.println(foundWord);

			assertNotNull(foundWord);
			assertEquals(expectedWord, foundWord);

			latch.await();

			assertEquals(i + 1, x1.getGame().getSolvedWords().size());

			if (turnExpected == p1) {
				turnExpected = p2;
				handlerImplExpected = x2;
			} else {
				turnExpected = p1;
				handlerImplExpected = x1;
			}
		}

		assertEquals(GameState.FINISHED, x1.getGame().getState());
		x1.stopGame();

		assertEquals(null, x1.getGame());
	}

}
