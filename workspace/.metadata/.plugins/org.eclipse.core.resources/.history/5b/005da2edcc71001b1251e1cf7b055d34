package cool.paul.fh.wortsuche;

import java.util.Optional;

import javax.annotation.Resource;
import javax.ejb.EJB;
import javax.ejb.Singleton;
import javax.inject.Inject;
import javax.jms.JMSContext;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Topic;

import cool.paul.fh.wortsuche.common.beans.GameInstanceLocal;
import cool.paul.fh.wortsuche.common.beans.GameInstanceRemote;
import cool.paul.fh.wortsuche.common.beans.GameManagementLocal;
import cool.paul.fh.wortsuche.common.entity.Game;
import cool.paul.fh.wortsuche.common.entity.GameState;
import cool.paul.fh.wortsuche.common.entity.Player;
import cool.paul.fh.wortsuche.common.entity.SolvedWord;
import cool.paul.fh.wortsuche.common.entity.Word;
import cool.paul.fh.wortsuche.common.exception.GameAlreadyRunningException;
import cool.paul.fh.wortsuche.common.exception.MapNotFoundException;
import cool.paul.fh.wortsuche.common.exception.NoGameFoundException;
import cool.paul.fh.wortsuche.common.exception.NotYourTurnException;
import cool.paul.fh.wortsuche.common.exception.WordAlreadySolvedException;

@Singleton
public class GameInstanceBean implements GameInstanceRemote, GameInstanceLocal {

	@Inject
	private JMSContext jmsContext;
	@Resource(lookup = "java:global/jms/GameStateUpdates")
	private Topic observerTopic;
	@EJB
	private GameManagementLocal gameManagement;

	private Game game;

	@Override
	public void newGame(int mapId) throws GameAlreadyRunningException, MapNotFoundException {
		if (game != null) {
			throw new GameAlreadyRunningException();
		}

		game = gameManagement.newGame(mapId);
	}

	public Player join(String name) throws NoGameFoundException {
		if (game == null) {
			throw new NoGameFoundException();
		}

		Player player = gameManagement.newPlayer(name);

		game.getPlayers().add(player);
		game = gameManagement.updateGame(game);

		notifyViaObserverTopic();

		return player;
	}

	public void quit(Player player) throws NoGameFoundException {
		if (game == null) {
			throw new NoGameFoundException();
		}

		game.getPlayers().remove(player);
		gameManagement.deletePlayer(player);
		game = gameManagement.updateGame(game);
		notifyViaObserverTopic();
	}

	public void start() throws NoGameFoundException {
		if (game == null) {
			throw new NoGameFoundException();
		}

		game.setState(GameState.RUNNING);
		nextTurn();
		game = gameManagement.updateGame(game);

		notifyViaObserverTopic();
	}

	public Game getGame() {
		return game;
	}

	@Override
	public String selectWord(Player player, int x1, int y1, int x2, int y2)
			throws NotYourTurnException, WordAlreadySolvedException, NoGameFoundException {
		if (game == null) {
			throw new NoGameFoundException();
		}

		if (!player.equals(game.getCurrentTurn())) {
			throw new NotYourTurnException();
		}

		Optional<Word> optWord = game.getMap().getWords().stream().filter((w) -> {
			return (w.getX1() == x1 && w.getY1() == y1 && w.getX2() == x2 && w.getY2() == y2)
					|| (w.getX1() == x2 && w.getY1() == y2 && w.getX2() == x1 && w.getY2() == y1);
		}).findAny();

		if (!optWord.isPresent()) {
			return null;
		}

		Word word = optWord.get();

		// is the word already solved?
		boolean wordWasAlreadySolved = game.getSolvedWords().stream().filter(x -> x.getWord().equals(word)).findAny()
				.isPresent();
		if (wordWasAlreadySolved) {
			throw new WordAlreadySolvedException();
		}

		game.getSolvedWords().add(new SolvedWord(word, player));
		game = gameManagement.updateGame(game);

		String wordAsString = word.getString(game.getMap());
		
		nextTurn();

		return wordAsString;
	}

	private void nextTurn() throws NoGameFoundException {
		if (game == null) {
			throw new NoGameFoundException();
		}

		Player current = game.getCurrentTurn();

		int nextPlayerIndex = 0;
		if (current != null) {
			int index = game.getPlayers().indexOf(current);
			nextPlayerIndex = index + 1;
		}
		if (nextPlayerIndex >= game.getPlayers().size()) {
			nextPlayerIndex = 0;
		}

		Player nextPlayer = game.getPlayers().get(nextPlayerIndex);
		game.setCurrentTurn(nextPlayer);

		if (game.getSolvedWords().size() >= game.getMap().getWords().size()) {
			game.setCurrentTurn(null);
			game.setState(GameState.FINISHED);

			notifyViaObserverTopic();
			onGameEnded();

		} else {
			game = gameManagement.updateGame(game);
			notifyViaObserverTopic();
		}
	}

	private void onGameEnded() throws NoGameFoundException {
		if (game == null) {
			throw new NoGameFoundException();
		}

		gameManagement.deleteGame(game);
		game = null;

		notifyViaObserverTopic();
	}

	private void notifyViaObserverTopic() {
		try {
			Message message = jmsContext.createMessage();
			message.setIntProperty("OBSERVER_TYPE", 1);

			jmsContext.createProducer().send(observerTopic, message);
		} catch (JMSException ex) {
			System.err.println("Error while notify observers via topic " + ex.getMessage());
		}
	}
}
