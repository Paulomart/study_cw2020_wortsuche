package cool.paul.fh.wortsuche.client;

import static org.junit.Assert.assertNull;

import javax.jms.ConnectionFactory;
import javax.jms.JMSContext;
import javax.jms.Queue;
import javax.jms.Topic;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import cool.paul.fh.wortsuche.common.beans.GameInstanceRemote;
import cool.paul.fh.wortsuche.common.beans.GameManagementRemote;
import cool.paul.fh.wortsuche.common.beans.MapManagementRemote;
import cool.paul.fh.wortsuche.common.exception.NoGameFoundException;

public class MapManagementTest {

	private Context ctx;
	private JMSContext jmsContext;
	private GameInstanceRemote gameInstance;
	private GameManagementRemote gameManagement;

	private MapManagementRemote mapManagement;
	private Queue mapCreationQueue;

	@Before
	public void initializeBeans() {
		try {
			ctx = new InitialContext();

			mapManagement = (MapManagementRemote) ctx.lookup(
					"java:global/Wortsuche-ear/Wortsuche-ejb/MapManagementBean!cool.paul.fh.wortsuche.common.beans.MapManagementRemote");

			gameManagement = (GameManagementRemote) ctx.lookup(
					"java:global/Wortsuche-ear/Wortsuche-ejb/GameManagementBean!cool.paul.fh.wortsuche.common.beans.GameManagementRemote");
			gameInstance = (GameInstanceRemote) ctx.lookup(
					"java:global/Wortsuche-ear/Wortsuche-ejb/GameInstanceBean!cool.paul.fh.wortsuche.common.beans.GameInstanceRemote");
		} catch (NamingException e) {
			throw new RuntimeException(e);
		}
	}

	@Before
	public void initializeJMSConnections() {
		try {
			ConnectionFactory connectionFactory = (ConnectionFactory) ctx
					.lookup("java:comp/DefaultJMSConnectionFactory");
			jmsContext = connectionFactory.createContext();

			mapCreationQueue = (Queue) ctx.lookup("java:global/jms/MapCreationQueue");
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	@Test
	public void test_getAllMaps_vaild() {
		mapManagement.getAllMaps().size();
	}

	@Test
	public void test_getMapById_invalid_mapId() {
		assertNull(mapManagement.getMapById(-1));
	}

	@After
	public void cleanup() {
		try {
			gameInstance.stop();
		} catch (NoGameFoundException e) {
		}
	}

}
