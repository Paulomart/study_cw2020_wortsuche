package cool.paul.fh.wortsuche.client;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CountDownLatch;

import javax.naming.InitialContext;
import javax.naming.NamingException;

import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import cool.paul.fh.wortsuche.common.beans.GameManagementRemote;
import cool.paul.fh.wortsuche.common.entity.Game;
import cool.paul.fh.wortsuche.common.entity.GameState;
import cool.paul.fh.wortsuche.common.entity.Map;
import cool.paul.fh.wortsuche.common.entity.Player;
import cool.paul.fh.wortsuche.common.entity.SolvedWord;
import cool.paul.fh.wortsuche.common.entity.Word;
import cool.paul.fh.wortsuche.common.exception.GameAlreadyRunningException;
import cool.paul.fh.wortsuche.common.exception.MapNotFoundException;
import cool.paul.fh.wortsuche.common.exception.NoGameFoundException;
import cool.paul.fh.wortsuche.common.exception.NotYourTurnException;
import cool.paul.fh.wortsuche.common.exception.PlayerNotFoundException;
import cool.paul.fh.wortsuche.common.exception.WordAlreadySolvedException;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ResumeGameTest extends AbstractTwoPlayerTest {

	@Test
	public void _01_ensure_no_game_is_playing() {
		assertEquals(null, i1.getGame());
	}

	@Test
	public void _02_seed_game() throws NamingException {
		// in order to simulate a game resume, we need to restore a prepared object to
		// the database.

		Player p1 = new Player(212, "Eins");
		Player p2 = new Player(213, "Zwei");

		List<Player> players = new ArrayList<>();
		players.add(p1);
		players.add(p2);

		List<Word> words = new ArrayList<>();
		Word w = new Word(210, 1, 5, 0, 0);
		words.add(w);

		words.add(new Word(211, 2, 2, 0, 3));

		Set<SolvedWord> solvedWords = new HashSet<>();
		solvedWords.add(new SolvedWord(w, p1));

		Map map = new Map(209, 6, 5, "AHELLODESFGNDSEFGNDSLFGNAAAAAA", words);

		Game game = new Game(208, GameState.RUNNING, players, p2, map, solvedWords);

		InitialContext ctx = new InitialContext();
		GameManagementRemote gameManagement = (GameManagementRemote) ctx.lookup(
				"java:global/Wortsuche-ear/Wortsuche-ejb/GameManagementBean!cool.paul.fh.wortsuche.common.beans.GameManagementRemote");

		gameManagement.$$createGameForTesting(game);
	}

	@Test
	public void _03_resume_game() throws GameAlreadyRunningException, MapNotFoundException {
		i1.resumeGame();
		assertEquals(GameState.LOBBY, i1.getGame().getState());
	}

//	@Test
//	public void _03_join_player1() throws NoGameFoundException, PlayerNotFoundException {
//		p1 = i1.join("Eins");
//	}
//
//	@Test
//	public void _04_join_player4() throws NoGameFoundException, PlayerNotFoundException {
//		p2 = i2.join("Zwei");
//	}
//
//	@Test
//	public void _05_start_game() throws NoGameFoundException, InterruptedException {
//		latch = new CountDownLatch(2);
//
//		i1.startGame();
//		latch.await();
//		assertEquals(GameState.RUNNING, i1.getGame().getState());
//		assertEquals(p1, i1.getGame().getCurrentTurn());
//	}
//
//	@Test
//	public void _06_select_word()
//			throws NotYourTurnException, WordAlreadySolvedException, NoGameFoundException, InterruptedException {
//		latch = new CountDownLatch(2);
//
//		String foundWord1 = i1.selectWord(1, 0, 5, 0);
//		assertEquals("HELLO", foundWord1);
//		latch.await();
//
//		assertEquals(1, i1.getGame().getSolvedWords().size());
//		assertEquals(GameState.RUNNING, i1.getGame().getState());
//		assertEquals(p2, i1.getGame().getCurrentTurn());
//	}
//
//	@Test
//	public void _09_select_last_word()
//			throws NotYourTurnException, WordAlreadySolvedException, NoGameFoundException, InterruptedException {
//
//	}

	@Test
	public void _10_stop_game() throws NoGameFoundException {
		i1.stopGame();

		assertEquals(null, i1.getGame());
	}
}
