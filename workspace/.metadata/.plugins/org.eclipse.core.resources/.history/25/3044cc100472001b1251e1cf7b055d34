package cool.paul.fh.wortsuche.client;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.util.concurrent.CountDownLatch;

import org.junit.Test;

import cool.paul.fh.wortsuche.common.entity.GameState;
import cool.paul.fh.wortsuche.common.entity.Player;
import cool.paul.fh.wortsuche.common.entity.Word;
import cool.paul.fh.wortsuche.common.exception.GameAlreadyRunningException;
import cool.paul.fh.wortsuche.common.exception.MapNotFoundException;
import cool.paul.fh.wortsuche.common.exception.NoGameFoundException;
import cool.paul.fh.wortsuche.common.exception.NotYourTurnException;
import cool.paul.fh.wortsuche.common.exception.PlayerNotFoundException;
import cool.paul.fh.wortsuche.common.exception.WordAlreadySolvedException;

public class LobbyTest {

//	@Test
//	public void joinGame1() {
//		ServiceHandlerImpl x = new ServiceHandlerImpl();
//		Player p = x.join("test");
//	}

	CountDownLatch latch;

	@Test
	public void playMap3() throws InterruptedException, NotYourTurnException, WordAlreadySolvedException,
			NoGameFoundException, GameAlreadyRunningException, MapNotFoundException, PlayerNotFoundException {
		ServiceHandlerImpl x1 = new ServiceHandlerImpl();

		assertEquals(null, x1.getGame());

		x1.newGame(1);

		Player p1 = x1.join("Eins");

		ServiceHandlerImpl x2 = new ServiceHandlerImpl();
		Player p2 = x2.join("Zwei");

		latch = new CountDownLatch(2);

		x1.addObserver((o, arg) -> {
			latch.countDown();
		});
		x2.addObserver((o, arg) -> {
			latch.countDown();
		});

		assertEquals(GameState.LOBBY, x1.getGame().getState());
		x1.startGame();
		latch.await();

		assertEquals(GameState.RUNNING, x1.getGame().getState());
		assertEquals(p1, x1.getGame().getCurrentTurn());

		try {
			Thread.sleep(15_500);
		} catch (Exception e) {
		}

		assertEquals(GameState.RUNNING, x1.getGame().getState());
		assertEquals(p2, x1.getGame().getCurrentTurn());

		x1.stopGame();

		assertEquals(null, x1.getGame());
	}

}
