package cool.paul.fh.wortsuche;

import java.util.Arrays;

import javax.annotation.PostConstruct;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import cool.paul.fh.wortsuche.common.beans.GameManagementLocal;
import cool.paul.fh.wortsuche.common.beans.GameManagementRemote;
import cool.paul.fh.wortsuche.common.entity.Game;
import cool.paul.fh.wortsuche.common.entity.Map;
import cool.paul.fh.wortsuche.common.entity.Player;
import cool.paul.fh.wortsuche.common.exception.MapNotFoundException;

@Stateless
public class GameManagementBean implements GameManagementLocal, GameManagementRemote {

	@PersistenceContext
	private EntityManager entityManager;

	@PostConstruct
	private void init() {

//		createDefaultProducts();
	}

	@Override
	public Game newGame(int mapId) throws MapNotFoundException {
//		players = Collections.unmodifiableList(new ArrayList<>(players));

		Map map;
		if (mapId == 1) {
			map = Map.fromArray(new String[] { "AHELLO", "DESFGN", "DSEFGN", "DSLFGN", "AAAAAA", }, 1, 0, 5, 0, 2, 0, 2,
					3);

		} else if (mapId == 2) {
			map = Map.fromArray(
					new String[] { "GEXCEPTIONXPFW", "FWIJAYIYKQYCQY", "FACHHOCHSCHULE", "IBEANNGOWALTYT",
							"LDZKWHCZBLOZHA", "TGVLNHGLOFCWQR", "RYWARCTOCTAOXG", "YLHSJGLYPALAKQ", "QEUSJYENTITYKI",
							"INTERFACEGPCGJ", "COMPONENTWAREX", "JAVABIBGJVLDTY", "REMOTEACBNGUEG", "XDORTMUNDPNTGN", },
					1, 0, 5, 0, 2, 0, 2, 3);
		} else {
			throw new MapNotFoundException();
		}

		Game game = new Game(Arrays.asList(), map);
		entityManager.persist(game);

		return game;
	}

	@Override
	public Game updateGame(Game game) {
		game = entityManager.merge(game);
		entityManager.flush();
		return game;
	}

	@Override
	public void deleteGame(Game game) {
		entityManager.remove(game);
	}

	@Override
	public void deletePlayer(Player player) {
		entityManager.remove(player);
	}

	@Override
	public Player newPlayer(String name) {
		Player player = new Player(name);

		entityManager.persist(player);

		return player;
	}
}
