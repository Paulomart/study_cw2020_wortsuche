package cool.paul.fh.wortsuche.client.integration;

import static org.junit.Assert.assertEquals;

import java.util.concurrent.CountDownLatch;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import cool.paul.fh.wortsuche.client.TestHelper;
import cool.paul.fh.wortsuche.common.entity.GameState;
import cool.paul.fh.wortsuche.common.entity.Map;
import cool.paul.fh.wortsuche.common.exception.GameAlreadyRunningException;
import cool.paul.fh.wortsuche.common.exception.NoGameFoundException;
import cool.paul.fh.wortsuche.common.exception.NotYourTurnException;
import cool.paul.fh.wortsuche.common.exception.PlayerAlreadyJoinedException;
import cool.paul.fh.wortsuche.common.exception.PlayerNotFoundException;
import cool.paul.fh.wortsuche.common.exception.WordAlreadySolvedException;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class SimpleMap1Test extends AbstractTwoPlayerTest {

	/*
	 * Vor Beginn des Tests darf kein anderes Spiel laufen.
	 */
	@Test
	public void _01_ensure_no_game_is_playing() {
		assertEquals(null, h1.getGame());
	}

	/*
	 * Ein neues Spiel wird auf der kleinen Map gestartet.
	 * 
	 * Das Spiel sollte von beiden Clients aus den Status LOBBY haben.
	 */
	@Test
	public void _02_start_new_game() throws GameAlreadyRunningException {
		Map map = TestHelper.getSmallMap(h2.getAllMaps());
		h1.newGame(map);
		assertEquals(GameState.LOBBY, h1.getGame().getState());
		assertEquals(GameState.LOBBY, h2.getGame().getState());
	}

	/*
	 * Der erste Spieler sollte den Spiel betretten können.
	 */
	@Test
	public void _03_join_player1() throws NoGameFoundException, PlayerNotFoundException, PlayerAlreadyJoinedException {
		p1 = h1.join("Eins");
	}

	/*
	 * Der zweite Spieler sollte den Spiel betretten können.
	 */
	@Test
	public void _04_join_player4() throws NoGameFoundException, PlayerNotFoundException, PlayerAlreadyJoinedException {
		p2 = h2.join("Zwei");
	}

	/*
	 * Das Spiel wird gestartet.
	 */
	@Test
	public void _05_start_game() throws NoGameFoundException, InterruptedException {
		latch = new CountDownLatch(2);

		h1.startGame();
		latch.await();
		assertEquals(GameState.RUNNING, h1.getGame().getState());
		assertEquals(p1, h1.getGame().getCurrentTurn());
	}

	@Test
	public void _06_select_word()
			throws NotYourTurnException, WordAlreadySolvedException, NoGameFoundException, InterruptedException {
		latch = new CountDownLatch(2);

		String foundWord1 = h1.selectWord(1, 0, 5, 0);
		assertEquals("HELLO", foundWord1);
		latch.await();

		assertEquals(1, h1.getGame().getSolvedWords().size());
		assertEquals(GameState.RUNNING, h1.getGame().getState());
		assertEquals(p2, h1.getGame().getCurrentTurn());
	}

	@Test(expected = WordAlreadySolvedException.class)
	public void _07_selected_already_solved_word()
			throws NotYourTurnException, WordAlreadySolvedException, NoGameFoundException {
		h2.selectWord(1, 0, 5, 0);
	}

	@Test(expected = NotYourTurnException.class)
	public void _08_illegal_turn_order() throws NotYourTurnException, WordAlreadySolvedException, NoGameFoundException {
		h1.selectWord(2, 0, 2, 3);
	}

	@Test
	public void _09_select_last_word()
			throws NotYourTurnException, WordAlreadySolvedException, NoGameFoundException, InterruptedException {
		latch = new CountDownLatch(2);

		String foundWord2 = h2.selectWord(2, 0, 2, 3);
		assertEquals("ESEL", foundWord2);
		latch.await();

		assertEquals(2, h1.getGame().getSolvedWords().size());
		assertEquals(GameState.FINISHED, h1.getGame().getState());
		assertEquals(null, h1.getGame().getCurrentTurn());
	}

	@Test
	public void _10_stop_game() throws NoGameFoundException {
		h1.stopGame();

		assertEquals(null, h1.getGame());
	}
}
